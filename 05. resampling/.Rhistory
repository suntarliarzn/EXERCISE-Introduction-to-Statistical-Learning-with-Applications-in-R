View(birminghan_USA)
library(readxl)
the_first_coder <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the first coder.xlsx",
na = "0")
View(the_first_coder)
library(readxl)
the_first_coder <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the first coder.xlsx")
View(the_first_coder)
library(readxl)
the_second_code <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the second code.xlsx")
View(the_second_code)
ratertab <- xtabs(~the_first_coder$`city of birminghan_USA`+the_second_code$`city of birminghan_USA`)
ratertab
CohenKappa(ratertab)
library(VCD)
library(vcd)
install.packages("DescTools")
library(DescTools)
CohenKappa(ratertab)
library("irr")
install.packages("irr")
library("irr")
library(psych)
cohen.kappa(ratertab)
birminghan_USA <- as.dataframe(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
birminghan_USA <- dataframe(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
birminghan_USA <- data.frame(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
cohen.kappa(birminghan_USA)
Putian_China <- data.frame(the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
cohen.kappa(Putian_China)
US <- DATA.FRAME(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`,the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
US <- as.data.frame(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`,the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
View(US)
library(readxl)
the_first_coder <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the first coder.xlsx", na = "0")
the_second_code <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the second code.xlsx")
library("irr")
library(psych)
birminghan_USA <- data.frame(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
cohen.kappa(birminghan_USA) #0.65[0.48~0.81]
Putian_China <- data.frame(the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
cohen.kappa(Putian_China) #0.58[0.43-0.74]
library(readxl)
the_first_coder <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the first coder.xlsx", na = "0")
the_second_code <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the second code.xlsx")
library("irr")
library("psych"")
birminghan_USA <- data.frame(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
cohen.kappa(birminghan_USA) #0.65[0.48~0.81]
Putian_China <- data.frame(the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
cohen.kappa(Putian_China) #0.58[0.43-0.74]
library(readxl)
the_first_coder <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the first coder.xlsx", na = "0")
the_second_code <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the second code.xlsx")
library("irr")
library("psych")
birminghan_USA <- data.frame(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
cohen.kappa(birminghan_USA) #0.65[0.48~0.81]
Putian_China <- data.frame(the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
cohen.kappa(Putian_China) #0.58[0.43-0.74]
library(readxl)
the_first_coder <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the first coder.xlsx")
the_second_code <- read_excel("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/the second code.xlsx")
library("irr")
library("psych")
birminghan_USA <- data.frame(the_first_coder$`city of birminghan_USA`,the_second_code$`city of birminghan_USA`)
cohen.kappa(birminghan_USA) #0.65[0.48~0.81]
Putian_China <- data.frame(the_first_coder$`city of Putian_China`,the_second_code$`city of Putian_China`)
cohen.kappa(Putian_China) #0.58[0.43-0.74]
install.packages(c("digest", "htmltools", "Rmpfr", "robustbase", "survival"))
library("ISLR")
set.seed(1)
?Auto
summary(Auto)
train=sample(392,196)
lm.fit <- lm(mpg~horsepower, data =Auto)
summary(lm.fit)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train)
summary(lm.fit.train)
lm.fit.pred<- predict(lm.fit.train, Auto[-train])
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
mse(mpg[-train]-lm.fit.pred)
sse <- sum((mpg[-train]-lm.fit.pred)^2)
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
sse
mse <- sqrt(sse/194)
mse
mean(Auto$mpg[-train]-lm.fit.pred)^2)
mean((Auto$mpg[-train]-lm.fit.pred)^2)
mean((Auto$mpg-predict(lm.fit, Auto))[-train]^2)
mean(((Auto$mpg-predict(lm.fit, Auto))[-train])^2)
mean((Auto$mpg[-train]-lm.fit.pred)^2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((mpg[-train]-lm.fit.pred)^2)
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((mpg[-train]-lm.fit.pred)^2)
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194) #4.848
library("ISLR")
summary(Auto)
lm.fit <- lm(mpg~horsepower, data =Auto)
summary(lm.fit)
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194) #4.848
mse
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~poly(horsepower,2), data =Auto, subset=train)
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~horsepower, data =Auto, subset=train)
summary(lm.fit2.train)
lm.fit2 <- lm(mpg~poly(horsepower,2), data =Auto)
summary(lm.fit2)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194)
mse
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194)
mse
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
summary(lm.fit.train)
lm.fit2.train <- lm(mpg~poly(horsepower,2), data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194)
mse
lm.fit2 <- lm(mpg~poly(horsepower,2), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~horsepower, data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
lm.fit2 <- lm(mpg~poly(horsepower,3), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~horsepower, data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
mse
lm.fit2 <- lm(mpg~poly(horsepower,4), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~horsepower, data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
mse
lm.fit2 <- lm(mpg~poly(horsepower,2), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~poly(horsepower,2), data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
mse
lm.fit2 <- lm(mpg~poly(horsepower,3), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~poly(horsepower,3), data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
mse
lm.fit2 <- lm(mpg~poly(horsepower,4), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~poly(horsepower,4), data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
mse
lm.fit2 <- lm(mpg~poly(horsepower,10), data =Auto)
summary(lm.fit2) #4.374
set.seed(1)
train=sample(392,196)
lm.fit2.train <- lm(mpg~poly(horsepower,10), data =Auto, subset=train)
lm.fit2.pred<- predict(lm.fit2.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit2.pred)^2)
mse <- sqrt(sse/194) #4.348
mse
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194) #4.848
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194) #4.848
mse
set.seed(1)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
library("ISLR")
summary(Auto)
lm.fit <- lm(mpg~horsepower, data =Auto)
summary(lm.fit)
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194) #4.848
mse
train=sample(392,196)
lm.fit.train <- lm(mpg~horsepower, data =Auto, subset=train) #4.904
lm.fit.pred<- predict(lm.fit.train, Auto)[-train]
sse <- sum((Auto$mpg[-train]-lm.fit.pred)^2)
mse <- sqrt(sse/194) #4.848
mse
mean((Auto$mpg -predict (lm.fit3 ,Auto))[-train ]^2)
mean((Auto$mpg -predict (lm.fit2.train ,Auto))[-train ]^2)
mean((Auto$mpg -predict (lm.fit3.train ,Auto))[-train ]^2)
library(ISLR)
glm.fit <- glm(Auto$mpg~Auto$horsepower,data=Auto)
glm.fit
?cv.glm
library(boot)
cv.glm()
?CV.GLM
?cv.glm
cv.glm(Auto, glm.fit)
lm.fit<- lm(mpg~horsepower,Auto)
summary(lm.fit)
sqrt(97.58181/390)
sqrt(97.58181/390)
sqrt(97.58181)
cv.glm(Auto, glm.fit)
cv.err=cv.glm(Auto ,glm.fit)
warnings()
View(cv.err)
cv.err=cv.glm(data.frame(Auto$mpg,Auto$horsepower) ,glm.fit)
cv.err$delta
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
glm.fit <- glm(mpg~horsepower,data=Auto)
library(boot)
library(ISLR)
glm.fit <- glm(mpg~horsepower,data=Auto)
library(boot)
cv.err <- cv.glm(Auto, glm.fit)
cv.err$delta
glm.fit <- glm(mpg~horsepower,data=Auto)
summary(glm.fit)
glm.fit1 <- glm(Auto$mpg~Auto$horsepower)
glm.fit1
head(Auto)
library(ISLR)
glm.fit <- glm(mpg~horsepower,data=Auto)
# glm.fit1 <- glm(Auto$mpg~Auto$horsepower) 这种写法重新构建了数据集，丢失原有数据集信息。
library(boot)
cv.err <- cv.glm(Auto, glm.fit)
cv.err$delta
sqrt(24.2315)
lm(mpg~horsepower, data=Auto)
lm.fit <- lm(mpg~horsepower, data=Auto)
summary(lm.fit)
set.seed(17)
cv.err.10 <- rep(0,10)
cv.err.10
cv.err <- function(i){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, k=10)
cv.err.10[i]=cv$delta[1]
}
cv.err(10)
cv.err <- function(i){
for i in (1:10):
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, K=10)cv.err.10[i]=cv$delta[1]
return()
}
cv.err <- function(i){
for i in (1:10):
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, K=10)
cv.err.10[i]=cv$delta[1]
return(cv.err.10)
}
cv.err <- function(i){
while i<= 10{
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, K=10)
cv.err.10[i]=cv$delta[1]
i=i+1
}
return(sqrt(cv.err.10))
}
cv.err <- function(i){
while (i <= 10);{
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))
}
cv.err <- function(i){
while (i <= 10);{
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(cv.err.10)
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(cv.err.10)}
cv.err <- function(i){
while (i <= 10);{
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))
}
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(cv.err.10)}
cv.err(1)
cv.err(2)
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
returnsqrt((cv.err.10))}
cv.err(1)
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt((cv.err.10))}
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))}
cv.err(1)
cv.err(1)
knitr::knit2html("4.2 chapter 5.3.2 cross-validation.Rmd")
setwd("E:/little-trowel/02_技术传播/04 实用工具/4.2 R/04. resampling")
library(ILSR)
library(ISLR)
libary(boot)
install.packages("boot")
libary(boot)
library(boot)
?Portfolio
head(Portfolio)
xy.fn <- function(data, index){
x = data$X[index];
y = data$Y[index];
return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x*y)))
}
xy.fn(Porfolio, 1:100)
xy.fn(Portfolio, 1:100)
xy.fn <- function(data, index){
+     x = data$X[index];
+     y = data$Y[index];
+     return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))
+ }
xy.fn <- function(data, index){
+     x = data$X[index];
+     y = data$Y[index];     return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))
}
xy.fn(Portfolio, 1:100)
xy.fn <- function(data, index){
x = data$X[index];
y = data$Y[index];
return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))
}
xy.fn(Portfolio, 1:100)
xy.fn(Portfolio, 1:10)
?boot
?boot()
library(boot)
?boot
library("boot")
?boot
help(boot)
boot(Portfolio, xy.fn, R=1000)
boot(Portfolio, xy.fn, R=1000)
xy.fn <- function(data, index){
x = data$X[sample(100,index)];
y = data$Y[sample(100,index)];
return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))
}
xy.fn(Portfolio,100)
xy.fn(Portfolio,10)
xy.fn <- function(data, index){
SP=sample(100,index)
x = data$X[SP];
y = data$Y[SP];
return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))}
xy.fn(Portfolio,100)
xy.fn(Portfolio,10)
xy.fn(Portfolio,100)
boot(Portfolio, xy.fn, R=1000)
boot(Portfolio, xy.fn, R=1000)
sample(100, 100)
xy.fn <- function(data, index){
SP=sample(100,index)x = data$X[SP];
+     y = data$Y[SP];
+     return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))}
sample(100, 50, replace = T)
xy.fn <- function(data, index){
SP=sample(100,index, replace = T);
x = data$X[SP];
y = data$Y[SP];
return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))}
xy.fn(Portfolio, 100)
xy.fn(Portfolio, 100)
boot(Portfolio, xy.fn, R=1000)
boot(Portfolio, xy.fn, R=1000)
boot.fn <- funtion(data, index){
coefficeints(lm(mpg~horsepower, data=Auto, subset=index))
}
boot.fn <- funtion(data, index){
coefficients(lm(mpg~horsepower, data=Auto, subset=index))
}
boot.fn <- funtion(data,index){
coefficients(lm(mpg~horsepower, data=Auto, subset=index))
}
boot.fn <- function(data,index){
coefficients(lm(mpg~horsepower, data=Auto, subset=index))
}
boo.fn(,100)
boo.fn()
boot.fn()
boot.fn(,100)
boot1.fn <- function(data){
coefficients(lm(mpg~horsepower, data=Auto))
}
boot1.fn()
boot(Auto, boot.fn, R=1000)
boot(Auto, boot1.fn, R=1000)
boot.fn(,100)
boot.fn(,1000)
boot.fn(,200)
boot.fn(Auto,200)
summary(boot.fn)
fit <- lm(mpg~horsepower, data =Auto)
summary(fit)
boot(Auto, boot.fn, R=1)
boot(Auto, boot.fn, R=2)
boot(Auto, boot.fn, R=3)
knitr::knit2html("4.3 chapter 5.3.3 bootstrap.Rmd")
install.packages("boot")
knitr::knit2html("4.3 chapter 5.3.3 bootstrap.Rmd")
