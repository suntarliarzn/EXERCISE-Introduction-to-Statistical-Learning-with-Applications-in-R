}
cv.err(10)
cv.err <- function(i){
for i in (1:10):
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, K=10)cv.err.10[i]=cv$delta[1]
return()
}
cv.err <- function(i){
for i in (1:10):
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, K=10)
cv.err.10[i]=cv$delta[1]
return(cv.err.10)
}
cv.err <- function(i){
while i<= 10{
glm.fit = glm(mpg~poly(horsepower,i), data=Auto)
cv=cv.glm(Auto,glm.fit, K=10)
cv.err.10[i]=cv$delta[1]
i=i+1
}
return(sqrt(cv.err.10))
}
cv.err <- function(i){
while (i <= 10);{
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))
}
cv.err <- function(i){
while (i <= 10);{
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(cv.err.10)
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(cv.err.10)}
cv.err <- function(i){
while (i <= 10);{
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))
}
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(cv.err.10)}
cv.err(1)
cv.err(2)
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
returnsqrt((cv.err.10))}
cv.err(1)
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt((cv.err.10))}
cv.err <- function(i){
while (i <= 10){
glm.fit = glm(mpg~poly(horsepower,i), data=Auto);
cv=cv.glm(Auto,glm.fit, K=10);
cv.err.10[i]=cv$delta[1];
i=i+1;
}
return(sqrt(cv.err.10))}
cv.err(1)
cv.err(1)
knitr::knit2html("4.2 chapter 5.3.2 cross-validation.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library("irr")
library("psych")
library(readr)
cohen_kappa_comparision <- read_csv("E:/PHD study/01 Research/0.1 Study one/1.5 coding test/cohen kappa/cohen kappa comparision.csv")
cohen_kappa <- data.frame(cohen_kappa_comparision$`the first coder`,cohen_kappa_comparision$`the second coder`)
cohen.kappa(cohen_kappa)
cohen_kappa
library(vcd)
Kappa(cohen_kappa)
ratertab <- xtabs(cohen_kappa$cohen_kappa_comparision..the.first.coder.,cohen_kappa$cohen_kappa_comparision..the.second.coder.)
Kappa(cohen_kappa_comparision$`the first coder`,cohen_kappa_comparision$`the second coder`)
Kappa(cohen_kappa_comparision)
View(chinese_data)
View(cohen_kappa)
View(cohen_kappa_comparision)
class(cohen_kappa)
class(cohen_kappa$cohen_kappa_comparision..the.first.coder.)
?Kappa
mat <- as.matrix(cohen_kappa_comparision$`the first coder`,cohen_kappa_comparision$`the second coder`)
View(mat)
Kappa(mat)
mat <- matrix()
matrix(cohen_kappa_comparision$`the first coder`,cohen_kappa_comparision$`the second coder`, nrow = 273, ncol = 2)
mat <- matrix(cohen_kappa_comparision$`the first coder`,cohen_kappa_comparision$`the second coder`, nrow = 273, ncol = 2)
xtabs(mat)
Kappa(mat)
data("SexualFun")
SexualFun
table<- replace(cohen_kappa$cohen_kappa_comparision..the.first.coder.==cohen_kappa$cohen_kappa_comparision..the.second.coder., 0)
table<- replace(cohen_kappa$cohen_kappa_comparision..the.first.coder.==cohen_kappa$cohen_kappa_comparision..the.second.coder., 0)
?replace
for (i=[1:273]){
if cohen_kappa$cohen_kappa_comparision..the.first.coder.[i]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[i];
cohen_kappa$cohen_kappa_comparision..the.first.coder.[i]==0;
}
knitr::opts_chunk$set(echo = TRUE)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.==0;
}
n=n+1;
}
return(cohen_kappa)
}
myfun(0)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.==0;
}
n=n+1;
}
return(cohen_kappa)
}
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
}
n=n+1;
}
return(cohen_kappa)
}
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
}
n=n+1;
}
return(cohen_kappa$cohen_kappa_comparision..the.first.coder.)
}
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
}
n=n+1;
}
return(cohen_kappa)
}
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
}
n=n+1;
}
else{n=n+1;
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
}
n=n+1;
else{n=n+1;
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
n=n+1;
}
else{
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
n=n+1;
}
else{
n=n+1;
}
}
}
myfun(1)
View(cohen_kappa)
View(cohen_kappa)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]==0;
n=n+1;
}
else{
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[2]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[2]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]==0;
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[2]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[2]==0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]==0;}
cohen_kappa$cohen_kappa_comparision..the.first.coder.[2]
cohen_kappa$cohen_kappa_comparision..the.SECOND.coder.[2]
cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]
cohen_kappa$cohen_kappa_comparision..the.first.coder.[2]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]
cohen_kappa$cohen_kappa_comparision..the.second.coder.[2]==0
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
else{
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
View(cohen_kappa)
View(cohen_kappa)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
else{
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
table <- myfun(1)
View(table)
xtabs(table)
tab <- xtabs(table)
tab
kappa(tab)
cohen.kappa(tab)
table((table)
table(table)
kappa <- table(table)
Kappa(kappa)
cohen.kappa(kappa)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
else{
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=1;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=2;
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
table(myfun(1))
table <- table(myfun(1))
Kappa(table)
cohen.kappa(table)
xtabs(myfun(1))
myfun <- myfun(1)
myfun
xtabs(~cohen_kappa_comparision..the.first.coder.+cohen_kappa_comparision..the.second.coder.,data=myfun)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
View(cohen_kappa)
View(cohen_kappa)
View(cohen_kappa)
xtabs(~cohen_kappa_comparision..the.first.coder.+cohen_kappa_comparision..the.second.coder., data=chen_kappa)
xtabs(~cohen_kappa_comparision..the.first.coder.+cohen_kappa_comparision..the.second.coder., data=cohen_kappa)
table <- xtabs(~cohen_kappa_comparision..the.first.coder.+cohen_kappa_comparision..the.second.coder., data=cohen_kappa)
cohen.kappa(table)
Kappa(table)
myfun(1)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
}
}
return(cohen_kappa)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
}
}
return(cohen_kappa)
myfun <- function(n){
while(n<274){
if (cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]==cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]){
cohen_kappa$cohen_kappa_comparision..the.first.coder.[n]=0;
cohen_kappa$cohen_kappa_comparision..the.second.coder.[n]=0;
n=n+1;
}
else{
n=n+1;
}
}
return(cohen_kappa)
}
myfun(1)
confun <- myfun(1)
View(confun)
xtabs(~cohen_kappa_comparision..the.first.coder.+cohen_kappa_comparision..the.second.coder.,data=confun)
contab <- xtabs(~cohen_kappa_comparision..the.first.coder.+cohen_kappa_comparision..the.second.coder.,data=confun)
cohen.kappa(contab)
Kappa(contab)
?cohen.kappa
knitr::opts_chunk$set(echo = TRUE)
library("irr")
library("psych")
library(readr)
cohen_kappa_comparision_with_function_area <- read_csv("cohen kappa comparision with function area.CSV")
attach(cohen_kappa_comparision_with_function_area)
cohen_kappa_function <- data.frame(`the first coder`,`the second coder`)
cohen.kappa(cohen_kappa_function)
cohen <- cohen.kappa(cohen_kappa_function)
summary(cohen)
confid(cohen)
cohen.summary
library("irr")
kappa2(cohen_kappa_function)
kappa2(cohen_kappa)
kappa2(cohen_kappa[1:100,])
kappa2(cohen_kappa[100:272,])
kappa2(cohen_kappa[1:2,])
cohen.kappa(cohen_kappa[1:2,])
cohen.kappa(cohen_kappa)
cohen.kappa(cohen_kappa[100:272,])
cohen.kappa(cohen_kappa[1:100,])
cohen.kappa(cohen_kappa[1:10,])
cohen.kappa(cohen_kappa[1:5,])
cohen.kappa(cohen_kappa[1:7,])
---
title: "excercise lm 3.8"
output: html_document
---
This question involves the use of simple linear regression on the Auto data set.
(a) Use the lm() function to perform a simple linear regression with mpg as the response and horsepower as the predict?r. Use the summary() function to print the results. Comment on the output. For example:
```R
attach(Auto)
fit <- lm(mpg~horsepower)
summary(fit)
```
1.Is there a relationship between the predictor and the response?
Yes, p-value<0.05
2.How strong is the r?lationship between the predictor and the response?
R^2=0.60, relatively strong.
3.Is the relationship between the predictor and the response positive or negative?
negative
4.What is the predicted mpg associated with a horsepower of 98? What are the assoc?ated 95% confidence and prediction intervals?
24.46708
```R
> predict(fit, data.frame(horsepower=98), interval="prediction")
fit     lwr      upr
1 24.46708 14.8094 34.12476
> predict(fit, data.frame(horsepower=98), interval="confidence")
fi?      lwr      upr
1 24.46708 23.97308 24.96108
```
5.Plot the response and the predictor. Use the abline() function to display the least squares regression line.
```R
> plot(horsepower,mpg)
> abline(fit,col="blue")
```
6.Use the plot() function to produc? diagnostic plots of the least squares regression fit. Comment on any problems you see with the fit.
```R
plot(fit)
> predict(fit, data.frame(horsepower=98), interval="prediction")
predict(fit, data.frame(horsepower=98), interval="prediction")
attach(Auto)
library("LSRL")
library("ISLR")
library("ISLR")
attach(Auto)
fit <- lm(mpg~horsepower)
summary(fit)
predict(fit, data.frame(horsepower=98), interval="prediction")
predict(fit, data.frame(horsepower=98), interval="confidence")
plot(horsepower,mpg)
plot(fit)
library("ISLR")
attach(Auto)
fit <- lm(mpg~horsepower)
summary(fit)
predict(fit, data.frame(horsepower=98), interval="prediction")
predict(fit, data.frame(horsepower=98), interval="confidence")
plot(horsepower,mpg)
install.package("png")
install.packages("png")
library(png)
plot(horsepower,mpg)
setwd("E:/little-trowel/02_技术传播/04 实用工具/4.2 R/02 线性回归")
plot(horsepower,mpg)
plot(horsepower,mpg)
plot(fit)
plot(horsepower,mpg)
predict(fit, data.frame(horsepower=98), interval="prediction")
predict(fit, data.frame(horsepower=98), interval="confidence")
library("ISLR")
attach(Auto)
fit <- lm(mpg~horsepower)
summary(fit)
plot(horsepower,mpg)
library("ISLR")
attach(Auto)
fit <- lm(mpg~horsepower)
summary(fit)
predict(fit, data.frame(horsepower=98), interval="prediction")
predict(fit, data.frame(horsepower=98), interval="confidence")
plot(horsepower,mpg)
plot(horsepower,mpg)
plot(fit)
